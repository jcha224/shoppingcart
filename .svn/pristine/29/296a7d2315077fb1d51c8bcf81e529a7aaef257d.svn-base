/*
 * TCSS 305 - SPRING 2016
 * Assignment 2 - Shopping Cart
 */

package model;

import java.math.BigDecimal;
import java.util.Objects;

/**
 * Represents Item object.
 * 
 * @author John
 * @version 15 April 2016
 */

public final class Item {
    
    /* The name of item. */
    private String myName;
    
    /* The price of item. */
    private BigDecimal myPrice;
    
    /* The number of items necessary to receive bulk price. */
    private BigDecimal myBulkQuantity;
    
    /* The bulk price */
    private BigDecimal myBulkPrice;
    
    
    public Item(final String theName, final BigDecimal thePrice) { 
        myName = theName;
        myPrice = thePrice;
        myBulkQuantity = BigDecimal.ZERO;
        myBulkPrice = BigDecimal.ZERO;
    }


    public Item(final String theName, final BigDecimal thePrice, final int theBulkQuantity,
                final BigDecimal theBulkPrice) {
        myName = theName;
        myPrice = thePrice;
        myBulkQuantity = BigDecimal.valueOf(theBulkQuantity);
        myBulkPrice = theBulkPrice;
    }


    public BigDecimal calculateItemTotal(final int theQuantity) {
        final BigDecimal quantity = BigDecimal.valueOf(theQuantity);
        final BigDecimal[] bulk = quantity.divideAndRemainder(myBulkQuantity);
        BigDecimal result = bulk[0].multiply(myBulkPrice);
        result = result.multiply(myBulkQuantity);
        result = result.add(bulk[1].multiply(myPrice));
        return result;
    }
    
    public boolean isBulk() {
        boolean result = false;
        if (this.myBulkPrice != null) {
            result = true;
        }
        return result;
    }

    @Override
    public String toString() {
        String result = myName + ", $" + myPrice.toString();
        if (this.isBulk()) {
            result = result + " ("
                          + myBulkQuantity.toString() + " for $"
                          + myBulkPrice.toString() + ")";
        }
        return result;
    }

    @Override
    public boolean equals(final Object theOther) {
        boolean result = false;
        if (theOther == null) {
            result = false;
        }
        final Item other = (Item) Objects.requireNonNull(theOther);
        if (!this.myName.equals(other.myName) 
                        || !this.myPrice.equals(other.myPrice)) {
            result = false;
        }
        if (!this.myBulkQuantity.equals(other.myBulkQuantity)
                        || !this.myBulkPrice.equals(other.myBulkPrice)) {
            result = false;
        }
        return result;
         
    }


    @Override
    public int hashCode() {
        return Objects.hash(this.myName, this.myPrice, this.myBulkQuantity, 
                            this.myBulkPrice);
    }

}
